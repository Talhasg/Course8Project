pwd
getwd()
setwd("/Users/talha/Downloads/DataScience/Course8/")
ls
setwd("/Users/talha/Downloads/DataScience/Course8/Project/")
read.csv("pml-training.csv")
tet<-read.csv("pml-training.csv")
summary(tet)
head(tet)
?table
x<-test
x<-tet
training<-tet
summart(data$classe)
summary(data$classe)
summary(training$classe)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
na_test
table(na_test)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
predictions
?preProcess
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc <- preProcess(training, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc <- preProcess(training, method='pca', thresh=0.9,
outcome=training$diagnosis)
trainn<-read.csv("pml-training.csv")
preProc <- preProcess(trainn, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc <- preProcess(trainn, method='pca', thresh=0.9,
outcome=training$classe)
preProc
View(trainn)
head(trainn)
preProc <- preProcess(trainn, method='pca', thresh=0.9,
outcome=trainn$classe)
preProc
?train
?preProcess
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc <- preProcess(ss, method='pca', thresh=0.9)
preProc
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc <- preProcess(training, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc <- preProcess(trainn, method='pca', thresh=0.9,
outcome=trainn$Classe)
preProc
summary(trainn)
head(trainn)
preProc <- preProcess(trainn, method='pca', thresh=0.9,
outcome=trainn$classe)
preProc
data<-train
data<-trainm
data<-trainn
inTrain <- createDataPartition(y=data$classe, p=0.75, list=FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
preProc <- preProcess(training, method='pca', thresh=0.9,outcome = training$classe)
preProc
modelFit <- train(training$classe ~ .,
method="glm",
preProcess="pca",
data=training,
trControl=trainControl(preProcOptions=list(thresh=0.9)))
head(iris)
dim(iris)
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
PC
trans$rotation
getwd()
test<-read.csv("pml-testing.csv")
train<-read.csv("pml-training.csv")
sensorColumns = grep(pattern = "_belt|_arm|_dumbbell|_forearm", names(train))
length(sensorColumns)
data = pml_training_data[, c(sensorColumns,160)]
data = train[, c(sensorColumns,160)]
missingData = is.na(data)
View(missingData)
omitColumns = which(colSums(missingData) > 19000)
data = data[, -omitColumns]
dim(data)
View(data)
inTrain <- createDataPartition(y=data$classe, p=0.70, list=FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
library(caret)
View(test)
View(training)
qplot(classe,user_name, colour=user_name, data=test)
View(test)
View(train)
qplot(classe,user_name, colour=user_name, data=train)
qplot(classe,colour=user_name, data=train)
qplot(classe,fill=user_name, data=train)
contents(train)
model = train(classe~., method="rf", data=trainning)
model = train(classe~., method="rf", data=training)
install.packages("randomForest")
library(randomForest)
install.package("randomForst")
install.package("randomForest")
install.packages("randomForest")
test<-read.csv("pml-testing.csv")
train<-read.csv("pml-training.csv")
inTrain = createDataPartition(y=data$classe, p=0.7, list=FALSE)
data<-train
inTrain = createDataPartition(y=data$classe, p=0.7, list=FALSE)
training = data[inTrain,]
testing = data[-inTrain,]
dim(training)
na_test = sapply(training, function(x) {sum(is.na(x))})
summary(na_test)
head(na_test)
table(na_test)
data = read.csv("./data/pml-training.csv", na.strings = c("NA", ""))
data = read.csv("pml-training.csv", na.strings = c("NA", ""))
inTrain = createDataPartition(y=data$classe, p=0.7, list=FALSE)
training = data[inTrain,]
testing = data[-inTrain,]
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
na_test
bad_columns = names(na_test[na_test==13460])
training = training[, !names(training) %in% bad_columns]
model1=train(classe~., method="pca")
bad_columns = names(na_test[na_test==13464])
training = training[, !names(training) %in% bad_columns]
model1=train(classe~., method="pca", data=training)
model1=train(classe~., method="glm", data=training)
model1=train(classe~., method="glm", , preProcess="pca",data=training)
R.version.string
library(randomForest)
install.packages(randomForest)
library("randomForest")
install.packages("randomForest")
model1=train(classe~., method="gbm",data=training)
install.packages("gb,")
install.packages("gbm")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
